---
# from https://github.com/danpawlik/openwrt-builder/blob/68ccd7ff5b026e409a27efe87b2f42d3ce2c713a/.github/workflows/bpi-r4-mediatek_feed.yaml
name: 🛠️ Build OpenWRT Bpi-R4 + MTK
on:
  workflow_dispatch:

env:
  REMOTE_REPOSITORY: danpawlik/openwrt
  REMOTE_BRANCH: main-mt76-fw
  RELEASE_PREFIX: bpi-r4_mtk
  DEVICE_CONFIG: configs/bpi-r4_config_mtk
  BUILD_JOBS: 2
  KEEP_RELEASES: 3

jobs:
  get_revision:
    name: 🔍 Get OpenWRT Revision
    runs-on: ubuntu-24.04
    outputs:
      revision: ${{ steps.get_revision.outputs.revision }}
      commit_sha: ${{ steps.get_commit_sha.outputs.commit_sha }}
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: 🛠️ Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}
          fetch-depth: 0
          fetch-tags: true

      - name: 🔄 Update tags
        run: git fetch --tags -f

      - name: 🔢 Get revision
        id: get_revision
        run: |
          chmod +x ./scripts/getver.sh
          RAW_REVISION=$(./scripts/getver.sh)
          SAFE_REVISION=$(echo "$RAW_REVISION" | sed 's/[\/]/-/g; s/[^a-zA-Z0-9_-]//g')
          echo "revision=${SAFE_REVISION}" >> $GITHUB_OUTPUT
      - name: 🔑 Get commit SHA
        id: get_commit_sha
        run: echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: 🕒 Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date -u +'%Y%m%dT%H%M%SZ')" >> $GITHUB_OUTPUT

  build:
    name: 🏗️ Build Firmware
    needs: [get_revision]
    runs-on: ubuntu-24.04
    env:
      REVISION: ${{ needs.get_revision.outputs.revision }}
      TIMESTAMP: ${{ needs.get_revision.outputs.timestamp }}

    steps:
      - name: 📦 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            openwrt/dl
            openwrt/ccache
          key: ${{ runner.os }}-${{ env.REVISION }}-${{ hashFiles('.config') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.REVISION }}-
      - name: ⚙️ Install dependencies
        run: |
          sudo mkdir -p /tmp/apt-cache
          sudo apt-get update -o Dir::Cache::archives=/tmp/apt-cache
          sudo apt-get install -y \
            build-essential ccache clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget curl \
            --option Dir::Cache::archives=/tmp/apt-cache
          sudo apt-get autoremove -y
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}
          path: openwrt

      - name: 🔄 Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: ⚙️ Apply config
        run: |
          cd openwrt
          curl -fLSs "https://raw.githubusercontent.com/${{ github.repository_owner }}/Bpi-r4-OpenWRT-Build/master/${{ env.DEVICE_CONFIG }}" > .config
          make defconfig
      - name: 🛠️ Custom configuration
        run: |
          cd openwrt
          mkdir -p files/sbin files/etc/profile.d files/etc/uci-defaults
          
          wget --tries=3 --timeout=30 --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://raw.githubusercontent.com/${{ github.repository_owner }}/OpenWRT_packages/master/sysinfo/files/sbin/sysinfo.sh" \
            -O files/sbin/sysinfo.sh || exit 1
          
          wget --tries=3 --timeout=30 --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://raw.githubusercontent.com/${{ github.repository_owner }}/OpenWRT_packages/master/sysinfo/files/etc/profile.d/99-sysinfo.sh" \
            -O files/etc/profile.d/99-sysinfo.sh || exit 1
          
          chmod +x files/sbin/sysinfo.sh
          cat > files/etc/uci-defaults/99-custom-config << EOF
          uci set wireless.radio0.disabled=0
          uci commit
          /etc/init.d/dnscrypt-proxy enable
          /etc/init.d/dnscrypt-proxy restart
          /etc/init.d/adblock restart
          EOF
      - name: 🧹 Optimize config
        run: |
          cd openwrt
          grep "=m" .config | grep -v 'CONFIG_PACKAGE_libustream-mbedtls=m' | \
          while read -r line; do \
            module=$(echo "$line" | cut -f1 -d'='); \
            sed -i "s/^$line$/# $module is not set/" .config; \
          done
      - name: 📦 Download packages
        run: |
          cd openwrt
          make -j ${{ env.BUILD_JOBS }} download
      - name: 🏭 Build image
        run: |
          cd openwrt
          BUILD_TIMESTAMP=$(date --date="${TIMESTAMP:0:4}-${TIMESTAMP:4:2}-${TIMESTAMP:6:2} ${TIMESTAMP:9:2}:${TIMESTAMP:11:2}:${TIMESTAMP:13:2}" +%s)
          
          make -j ${{ env.BUILD_JOBS }} world \
            REVISION="${{ env.REVISION }}" \
            SOURCE_DATE_EPOCH=${BUILD_TIMESTAMP} \
            CCACHE=1 \
            BUILD_LOG=1 > build.log 2>&1 || (cat build.log && exit 1)
      - name: 🏷️ Rename artifacts
        run: |
          cd openwrt/bin/targets/mediatek/filogic
          
          REVISION="${{ needs.get_revision.outputs.revision }}"
          COMMIT_SHA="${{ needs.get_revision.outputs.commit_sha }}"
          TIMESTAMP="${{ needs.get_revision.outputs.timestamp }}"
          
          for file in *; do
            # Pomijamy katalog 'packages' i jego zawartość
            if [[ -d "$file" ]] && [[ "$file" == "packages" ]]; then
              continue
            fi
          
            if [[ "$file" == *"bananapi_bpi-r4"* ]]; then
              # Pobieramy typ obrazu
              image_type=$(echo "$file" | grep -oE '(sysupgrade|sdcard|recovery|snand|emmc|bl31|preloader)' | tr '\n' '-' | sed 's/-$//')
              image_type=${image_type:-unknown}
          
              # Tworzymy nową nazwę
              new_name=$(echo "$file" | sed "s/bananapi_bpi-r4/bananapi_bpi-r4-${REVISION}-${COMMIT_SHA}_${TIMESTAMP}/")
              new_name="${new_name%.*}-$image_type.${new_name##*.}"
          
              # Zmieniamy nazwę pliku
              mv -v "$file" "$new_name"
            fi
          done
      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-images
          path: openwrt/bin/targets/mediatek/filogic/*

  release:
    name: 🚀 Create Release
    needs: [build, get_revision]
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: firmware-images
          path: artifacts

      - name: 🗜️ Prepare release files
        run: |
          mkdir -p release_files
          find artifacts/ -type f -exec cp -v {} release_files/ \;
          echo "=== Release files ==="
          ls -lh release_files/
      - name: 🏷️ Create release
        uses: softprops/action-gh-release@v1
        with:
          files: release_files/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ needs.get_revision.outputs.revision }}
          name: "openwrt-${{ needs.get_revision.outputs.revision }}_${{ needs.get_revision.outputs.timestamp }}"
          body: |
            ### Build Details
            - **Device:** Banana Pi R4
            - **Revision:** ${{ needs.get_revision.outputs.revision }}
            - **Build Date:** ${{ needs.get_revision.outputs.timestamp }}
            - **Commit:** [${{ needs.get_revision.outputs.commit_sha }}](https://github.com/${{ env.REMOTE_REPOSITORY }}/commit/${{ needs.get_revision.outputs.commit_sha }})
      - name: 🧹 Clean old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: ${{ env.KEEP_RELEASES }}
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

